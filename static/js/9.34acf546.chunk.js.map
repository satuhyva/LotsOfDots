{"version":3,"sources":["components/create/options/VotingOptions.tsx","components/create/stepper/styles.ts","components/create/stepper/CreateVotingStepper.tsx","components/create/stepper/initialStepValues.ts","components/create/main/styles.ts","components/create/main/CreateVotingTitle.tsx","components/create/question/styles.ts","components/create/buttons/styles.ts","components/create/buttons/Buttons.tsx","components/create/question/EditQuestion.tsx","components/create/question/DisplayQuestion.tsx","components/create/question/CreateQuestion.tsx","components/create/main/getStepsWithUpdatedValues.ts","components/create/identity/styles.ts","components/create/identity/RadioButtons.tsx","components/create/identity/SettingIdentity.tsx","components/create/options/styles.ts","components/create/options/OptionsList.tsx","components/create/options/AddOrEditOption.tsx","components/create/options/getUpdatedCurrentOptionsList.ts","components/create/count/styles.ts","components/create/count/RadioButtons.tsx","components/create/count/SettingCount.tsx","components/create/code/styles.ts","components/create/code/PreviewVoting.tsx","components/create/code/MissingParameters.tsx","components/create/code/Buttons.tsx","components/create/code/getFormattedVotingData.ts","components/create/code/service.ts","components/create/code/GetCode.tsx","components/create/code/getStepsWithMissingValues.ts","components/create/success/styles.ts","components/create/success/Success.tsx","components/create/main/CreateVotingMainPage.tsx"],"names":["OptionListActions","useStyles","makeStyles","theme","createStyles","stepLabelTextActive","color","palette","primary","dark","fontSize","marginTop","stepLabelTextNotActive","light","iconActive","iconNotActive","CreateVotingStepper","activeStep","setActiveStep","stepsWithValues","classes","Stepper","alternativeLabel","nonLinear","data-testid","map","step","isActiveStep","index","Step","StepButton","onClick","StepLabel","StepIconComponent","hasAValue","iconClass","className","getIcon","undefined","value","Typography","label","labels","initialStepValues","number","pageTitleContainer","display","flexDirection","justifyContent","alignItems","marginBottom","text","main","CreateVotingTitle","variant","container","displayContainer","width","borderRadius","backgroundColor","secondary","padding","inputWidth","iconButton","editIconButton","margin","displayQuestion","fontStyle","buttonsContainer","buttonText","Buttons","Button","Array","isArray","length","questionIsValid","question","trim","EditQuestion","currentQuestion","saveQuestion","useState","setQuestion","TextField","placeholder","multiline","rows","onChange","event","target","DisplayQuestion","startEditing","IconButton","CreateQuestion","updateStepsWithValues","isEditing","setIsEditing","updatedQuestion","indexesAreSame","item","updatedStep","labelsAreSame","valueIsOfCorrectType","every","textAlign","outerContainer","RadioButtons","saveIdentityData","selectedValue","lightColor","darkColor","falseProps","style","trueProps","FormControl","component","RadioGroup","FormControlLabel","control","Radio","SettingIdentity","updatedIdentity","listText","listIcon","listIconButton","marginLeft","addButton","OptionsList","currentOptions","updateOptionsList","selectOptionForEditing","List","option","Fragment","ListItem","ListItemText","optionToRemove","REMOVE","Divider","optionIsValid","includes","AddOrEditOption","setOption","ADD","MODIFY","actionType","VotingOptions","setCurrentOptions","action","newData","oldData","updatedList","currentList","updatedOptionsList","console","log","push","filter","getUpdatedCurrentOptionsList","saveCountData","selectedProps","notSelectedProps","count","currentProps","SettingCount","updatedCount","parseInt","toString","previewContainer","questionText","optionText","infoText","errorMessage","error","noteText","paddingTop","PreviewVoting","MissingParameters","stepsWithMissingValues","submitData","valuesAreMissing","getFormattedVotingData","votingData","options","allowedCount","showNames","baseUrl","submitVotingData","a","requestBody","axios","post","response","success","code","data","GetCode","setCode","resetValues","setErrorMessage","dispatch","useContext","AppContext","getStepsWithMissingValues","submitVotingService","submissionResponse","type","actionTypes","SET_VOTING_NUMBER","id","title","info","linkText","link","Success","to","CreateVotingMainPage","setStepsWithValues","commonProps","stepWithUpdatedValue","stepsWithUpdatedValues","getStepsWithUpdatedValues"],"mappings":"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","file":"static/js/9.34acf546.chunk.js","sourcesContent":["import React, { useState } from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport Buttons from '../buttons/Buttons'\nimport { StepType } from '../../../types/create-voting/StepType'\nimport { OptionsType } from '../../../types/create-voting/OptionsType'\nimport OptionsList from './OptionsList'\nimport AddOrEditOption from './AddOrEditOption'\nimport { getUpdatedCurrentOptionsList } from './getUpdatedCurrentOptionsList'\nimport Button from '@material-ui/core/Button'\n\n\n\n\ntype VotingOptionsProps = {\n    setActiveStep: (newStep: number) => void,\n    updateStepsWithValues: (stepWithUpdatedValue: StepType) => void,\n    step: OptionsType,\n}\n\nexport enum OptionListActions {\n    'ADD' = 'add new item to list',\n    'MODIFY' = 'modify item on list',\n    'REMOVE' = 'remove item from list'\n}\n\n\n\nconst VotingOptions: React.FC<VotingOptionsProps> = ({ setActiveStep, updateStepsWithValues, step }) => {\n\n    const classes = useStyles()\n    const [currentOptions, setCurrentOptions] = useState<string[]>(step.value === undefined ? [] : step.value)\n    const [isEditing, setIsEditing] = useState<string | undefined>(currentOptions.length > 1 ? undefined : '')\n \n\n    const updateOptionsList = (action: OptionListActions, newData: string, oldData?: string) => {\n        const updatedList = getUpdatedCurrentOptionsList(currentOptions, action, newData, oldData)\n        setCurrentOptions(updatedList)\n        setIsEditing(undefined)\n        updateStepsWithValues({ ...step, value: updatedList })\n    }\n    const selectOptionForEditing = (option: string) => {\n        setIsEditing(option)\n    }\n\n\n    return(\n        <div className={classes.outerContainer}>\n            <div className={classes.container} data-testid='VotingOptions'>\n                <Typography variant='h6' className={classes.text}>\n                    VOTING OPTIONS\n                </Typography>\n                <OptionsList currentOptions={currentOptions} updateOptionsList={updateOptionsList} selectOptionForEditing={selectOptionForEditing}/>\n                {(currentOptions.length < 2 || isEditing !== undefined) ?\n                    <AddOrEditOption\n                        updateOptionsList={updateOptionsList}\n                        isEditing={isEditing}\n                        currentOptions={currentOptions}\n                    />\n                    :\n                    <>\n                        <Button onClick={() => selectOptionForEditing('')} className={classes.addButton} data-testid='button-add' >\n                            <Typography  className={classes.buttonText}>+ ADD NEW</Typography>\n                        </Button>\n                    \n                        <Buttons\n                            activeStep={step.index}\n                            setActiveStep={setActiveStep}\n                            value={currentOptions}\n                        />\n                    </>\n                    \n                }\n            </div>\n        </div>\n       \n        \n      \n    )\n}\n\nexport default VotingOptions","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        stepLabelTextActive: {\n            color: theme.palette.primary.dark,\n            fontSize: 14,\n            marginTop: -14\n        },\n        stepLabelTextNotActive: {\n            color: theme.palette.primary.light,\n            fontSize: 14,\n            marginTop: -14\n        },\n        iconActive: {\n            color: theme.palette.primary.dark,\n        },\n        iconNotActive: {\n            color: theme.palette.primary.light,\n        },\n    })\n)","import React from 'react'\nimport Stepper from '@material-ui/core/Stepper'\nimport Step from '@material-ui/core/Step'\nimport Typography from '@material-ui/core/Typography'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport StepButton from '@material-ui/core/StepButton'\nimport { useStyles } from './styles'\nimport CheckCircleIcon from '@material-ui/icons/CheckCircle'\nimport HelpIcon from '@material-ui/icons/Help'\nimport { StepsWithValuesType } from '../../../types/create-voting/StepsWithValuesType'\n\n\ntype CreateVotingStepperProps = {\n    activeStep: number,\n    setActiveStep: (newStep: number) => void,\n    stepsWithValues: StepsWithValuesType\n}\n\nconst getIcon = (isActiveStep: boolean, hasAValue: boolean) => {\n    const classes = useStyles()\n    const iconClass = isActiveStep ? classes.iconActive : classes.iconNotActive\n    if (hasAValue) {\n        return <CheckCircleIcon className={iconClass}/>\n    }\n    return <HelpIcon className={iconClass}/>\n}\n\n\n\nconst CreateVotingStepper: React.FC<CreateVotingStepperProps> = ({ activeStep, setActiveStep, stepsWithValues }) => {\n\n    const classes = useStyles()\n\n    return(\n        <Stepper alternativeLabel nonLinear activeStep={activeStep} data-testid='stepper'>\n            {stepsWithValues.map(step => {\n                const isActiveStep: boolean = step.index === activeStep\n                return (\n                    <Step key={step.label}>\n                        <StepButton onClick={() => setActiveStep(step.index)} data-testid={`step-button-${step.index}`}>\n                            <StepLabel\n                                StepIconComponent={() => getIcon(isActiveStep, step.value !== undefined)}\n                            >\n                                <Typography className={isActiveStep ? classes.stepLabelTextActive : classes.stepLabelTextNotActive}>\n                                    {step.label}\n                                </Typography>  \n                            </StepLabel>\n                        </StepButton>\n                    </Step>\n                )\n            })}\n        </Stepper>      \n    )\n}\n\nexport default CreateVotingStepper\n","import { StepsWithValuesType } from '../../../types/create-voting/StepsWithValuesType'\n\n\nconst labels = ['question', 'options', 'count', 'identity', 'code']\n\nexport const initialStepValues = [0,1,2,3,4].map(number => {\n    return (\n        { index: number, label: labels[number], value: undefined }\n    )\n}) as StepsWithValuesType","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        pageTitleContainer: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 20,\n            marginBottom: -5,\n        },\n        text: {\n            color: theme.palette.primary.main,\n        },\n    })\n)","import React from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport { useStyles } from './styles'\n\n\nconst CreateVotingTitle: React.FC = () => {\n\n    const classes = useStyles()\n\n    return(\n        <div className={classes.pageTitleContainer}>\n            <Typography variant='h5' className={classes.text}>\n                  CREATE NEW VOTING\n            </Typography>\n            <Typography className={classes.text}>\n                  Complete all steps to create a new voting event.\n            </Typography>\n        </div>\n    )\n}\n\nexport default CreateVotingTitle\n","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        container: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n            marginBottom: -5,\n        },\n        displayContainer: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n            width: '85%',\n            borderRadius: 6,\n            backgroundColor: theme.palette.secondary.light,\n            padding: 10,\n        },\n        text: {\n            color: theme.palette.primary.main,\n        },\n        inputWidth: {\n            width: '90%'\n        },\n        iconButton: {\n            backgroundColor: theme.palette.secondary.main,\n            marginTop: 10\n        },\n        editIconButton: {\n            backgroundColor: theme.palette.secondary.main,\n            margin: 10,\n        },\n        displayQuestion: {\n            fontSize: 20,\n            fontStyle: 'italic',\n            color: theme.palette.primary.main,\n        }\n    })\n)","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        buttonsContainer: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 30,\n        },\n        buttonText: {\n            color: theme.palette.primary.dark,\n        },\n        iconButton: {\n            backgroundColor: theme.palette.secondary.main,\n            margin: 5,\n        }\n\n    })\n)","import React from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\n\n\ntype ButtonProps = {\n    activeStep: number,\n    setActiveStep: (newStep: number) => void,\n    value: string | string[] | number | boolean | undefined\n}\n\n\nconst Buttons: React.FC<ButtonProps> = ({ activeStep, setActiveStep, value }) => {\n\n\n    const classes = useStyles()\n\n    const goBack = () => {\n        setActiveStep(activeStep - 1)\n    }\n    const goFurther = () => {\n        setActiveStep(activeStep + 1)\n    }\n    const canProceedToNext = () => {\n        return activeStep < 4 && value !== undefined && value !== '' && !(Array.isArray(value) && value.length < 2)\n    }\n\n\n    return(\n        <div className={classes.buttonsContainer} data-testid='Buttons'>\n            {activeStep > 0 &&\n                <Button onClick={goBack} className={classes.iconButton} data-testid='button-back' >\n                    <Typography className={classes.buttonText}>BACK</Typography>\n                </Button>   \n            }\n            {canProceedToNext() &&\n                <Button onClick={goFurther} className={classes.iconButton} data-testid='button-next' >\n                    <Typography  className={classes.buttonText}>NEXT</Typography>\n                </Button>\n            }\n        </div>\n      \n    )\n}\n\nexport default Buttons","import React, { useState } from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\n\n\n\nconst questionIsValid = (question: string): boolean => {\n    return question.trim().length > 0\n}\n\ntype EditQuestionProps = {\n    currentQuestion: string,\n    saveQuestion: (updatedQuestion: string) => void,\n}\n\n\n\nconst EditQuestion: React.FC<EditQuestionProps> = ({ currentQuestion, saveQuestion }) => {\n\n    const classes = useStyles()\n    const [question, setQuestion] = useState(currentQuestion)\n\n    const handleInputChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setQuestion(event.target.value)\n    }\n\n    return(\n        <div className={classes.container} data-testid='EditQuestion'>\n            <Typography className={classes.text}>\n                What is the voting about?\n            </Typography>\n            <Typography className={classes.text}>\n                Type the voting question below. \n            </Typography>\n            <TextField\n                value={question}\n                placeholder='For example: &#10;Where should we go on holiday?'\n                variant='outlined'\n                multiline\n                rows={5}\n                onChange={handleInputChanged}\n                className={classes.inputWidth}\n                data-testid='edit-textfield'\n            />\n            {questionIsValid(question) &&\n                <Button onClick={() => saveQuestion(question)} className={classes.iconButton} data-testid='save-edit-button'>\n                    <Typography>SAVE</Typography>\n                </Button>\n            }\n        </div>\n    )\n}\n\nexport default EditQuestion","import React from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport IconButton from '@material-ui/core/IconButton'\nimport EditIcon from '@material-ui/icons/Edit';\n\n\ntype DisplayQuestionProps = {\n    currentQuestion: string,\n    startEditing: () => void\n}\n\nconst DisplayQuestion: React.FC<DisplayQuestionProps> = ({ currentQuestion, startEditing }) => {\n\n    const classes = useStyles()\n\n    return(\n        <div className={classes.displayContainer} data-testid='DisplayQuestion'>\n            <Typography className={classes.displayQuestion}>\n                {currentQuestion} \n            </Typography>\n            <IconButton onClick={startEditing} className={classes.editIconButton} data-testid='icon-button'>\n                <EditIcon/>\n            </IconButton>\n            \n        </div>\n    )\n}\n\nexport default DisplayQuestion","import React, { useState } from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport Buttons from '../buttons/Buttons'\nimport { QuestionType } from '../../../types/create-voting/QuestionType'\nimport { StepType } from '../../../types/create-voting/StepType'\nimport EditQuestion from './EditQuestion'\nimport DisplayQuestion from './DisplayQuestion'\n\n\ntype CreateQuestionProps = {\n    setActiveStep: (newStep: number) => void,\n    updateStepsWithValues: (stepWithUpdatedValue: StepType) => void,\n    step: QuestionType,\n}\n\n\nconst CreateQuestion: React.FC<CreateQuestionProps> = ({ setActiveStep, updateStepsWithValues, step }) => {\n\n    const classes = useStyles()\n    const [isEditing, setIsEditing] = useState(step.value === undefined ? true : false)\n\n    const saveQuestion = (updatedQuestion: string) => {\n        setIsEditing(false)\n        updateStepsWithValues({ ...step, value: updatedQuestion })\n    }\n\n    const currentQuestion = step.value === undefined ? '' : step.value\n\n    return(\n        <div className={classes.container} data-testid='CreateQuestion'>\n            <Typography variant='h6' className={classes.text}>\n                QUESTION\n            </Typography>\n            {isEditing ?\n                <EditQuestion\n                    currentQuestion={currentQuestion}\n                    saveQuestion={saveQuestion}\n                />\n                :\n                <>\n                    <DisplayQuestion\n                        currentQuestion={currentQuestion}\n                        startEditing={() => setIsEditing(true)}\n                    />\n                    <Buttons\n                        activeStep={step.index}\n                        setActiveStep={setActiveStep}\n                        value={currentQuestion}\n                    />\n                </>\n            }\n        </div>\n      \n    )\n}\n\nexport default CreateQuestion","import { StepsWithValuesType } from '../../../types/create-voting/StepsWithValuesType'\nimport { StepType } from '../../../types/create-voting/StepType'\n\n\n \nexport const getStepsWithUpdatedValues = (\n    stepWithUpdatedValue: StepType,\n    stepsWithValues: StepsWithValuesType\n): StepsWithValuesType => {\n    const updatedSteps = stepsWithValues.map(item => {\n        if (indexesAreSame(item, stepWithUpdatedValue) && labelsAreSame(item, stepWithUpdatedValue) && valueIsOfCorrectType(stepWithUpdatedValue)) {\n            return { ...stepWithUpdatedValue }\n        } else {\n            return { ...item }\n        }\n    }) as StepsWithValuesType\n    return updatedSteps\n}\n\n\n\nconst indexesAreSame = (item: StepType, updatedStep: StepType): boolean => {\n    if (item.index === updatedStep.index) {\n        return true\n    }\n    return false\n}\n\nconst labelsAreSame = (item: StepType, updatedStep: StepType): boolean => {\n    if (item.index === updatedStep.index && item.label === updatedStep.label) {\n        return true\n    }\n    return false\n}\n\nconst valueIsOfCorrectType = (updatedStep: StepType): boolean => {\n    switch (updatedStep.label) {\n    case 'question':\n        return typeof updatedStep.value === 'string'\n    case 'options':\n        return Array.isArray(updatedStep.value) && updatedStep.value.every(item => typeof item === 'string')\n    case 'count':\n        return typeof updatedStep.value === 'number'\n    case 'identity':\n        return typeof updatedStep.value === 'boolean'\n    case 'code':\n        return typeof updatedStep.value === 'string'\n    default:\n        return false\n    }\n}","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        container: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n            marginBottom: -5,\n            width: '85%',\n        },\n        displayContainer: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n            width: '85%',\n            borderRadius: 6,\n            backgroundColor: theme.palette.secondary.light,\n            padding: 10,\n        },\n        text: {\n            color: theme.palette.primary.main,\n            textAlign: 'center',\n            marginBottom: 10\n        },\n        outerContainer: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n    })\n)","import React from 'react'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport theme from '../../../utils/theme'\n\n\ntype RadioButtonProps = {\n    saveIdentityData: (newValue: string) => void,\n    selectedValue: string\n}\n\n\nconst RadioButtons: React.FC<RadioButtonProps> = ({ saveIdentityData, selectedValue }) => {\n\n    const handleSelectionChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        saveIdentityData(event.target.value)\n    }\n\n    const lightColor = theme.palette.primary.light\n    const darkColor = theme.palette.primary.dark\n    const falseProps = { style: { color: selectedValue === '' ? lightColor : (selectedValue === 'false' ? darkColor : lightColor) } }\n    const trueProps = { style: { color: selectedValue === '' ? lightColor : (selectedValue === 'true' ? darkColor : lightColor) } }\n\n    return(\n        <div data-testid='RadioButtons'>\n            <FormControl component=\"fieldset\">\n                <RadioGroup value={selectedValue} onChange={handleSelectionChanged} data-testid='radiogroup'>\n                    <FormControlLabel\n                        value='false'\n                        control={<Radio {...falseProps}/>}\n                        label='Anonymous voting'\n                        {...falseProps}\n                    />\n                    <FormControlLabel\n                        value='true'\n                        control={<Radio {...trueProps}/>}\n                        label='Show voter names'\n                        {...trueProps}\n                    />\n                </RadioGroup>\n            </FormControl>\n        </div>\n      \n    )\n}\n\nexport default RadioButtons","import React from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport Buttons from '../buttons/Buttons'\nimport { StepType } from '../../../types/create-voting/StepType'\nimport { IdentityType } from '../../../types/create-voting/IdentityType'\nimport RadioButtons from './RadioButtons'\n\n\n\ntype SettingIdentityProps = {\n    setActiveStep: (newStep: number) => void,\n    updateStepsWithValues: (stepWithUpdatedValue: StepType) => void,\n    step: IdentityType,\n}\n\nconst SettingIdentity: React.FC<SettingIdentityProps> = ({ setActiveStep, updateStepsWithValues, step }) => {\n\n    const classes = useStyles()\n\n    const saveIdentityData = (updatedIdentity: string) => {\n        updateStepsWithValues({ ...step, value: updatedIdentity === 'true' ? true : false })\n    }\n\n    return(\n        <div className={classes.outerContainer}>\n            <div className={classes.container} data-testid='SettingIdentity'>\n                <Typography variant='h6' className={classes.text}>\n                IDENTITY\n                </Typography>\n                <Typography className={classes.text}>\n                When showing the results of the voting event, \n                should the names of the voters behind each vote be revealed to all participants?\n                </Typography>\n                <RadioButtons\n                    saveIdentityData={saveIdentityData}\n                    selectedValue={step.value === undefined ? '' : step.value === true ? 'true' : 'false'}\n                />\n                \n                <>\n                    <Buttons\n                        activeStep={step.index}\n                        setActiveStep={setActiveStep}\n                        value={step.value}\n                    />\n                </>\n                \n            </div>\n        </div>\n\n      \n    )\n}\n\nexport default SettingIdentity","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        container: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n            marginBottom: -5,\n            width: '85%',\n        },\n        displayContainer: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n            width: '85%',\n            borderRadius: 6,\n            backgroundColor: theme.palette.secondary.light,\n            padding: 10,\n        },\n        text: {\n            color: theme.palette.primary.main,\n            textAlign: 'center',\n            marginBottom: 10\n        },\n        outerContainer: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n        inputWidth: {\n            width: '90%'\n        },\n        iconButton: {\n            backgroundColor: theme.palette.secondary.main,\n            marginTop: 10\n        },\n        editIconButton: {\n            backgroundColor: theme.palette.secondary.main,\n            margin: 10,\n        },\n        listText: {\n            color: theme.palette.primary.main,\n            fontSize: 18,\n            fontStyle: 'italic',\n        },\n        listIcon: {\n            color: theme.palette.primary.main,\n        },\n        listIconButton:{\n            backgroundColor: theme.palette.secondary.light,\n            marginLeft: 10,\n            marginTop: -5,\n            marginBottom: -5\n        },\n        addButton:{\n            backgroundColor: theme.palette.secondary.light,\n            marginBottom: -10,\n            marginTop: 10\n        },\n        buttonText: {\n            color: theme.palette.primary.dark,\n        },\n\n    })\n)","import React from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport { OptionListActions } from './VotingOptions'\nimport { IconButton, List, ListItemText } from '@material-ui/core'\nimport { ListItem } from '@material-ui/core'\nimport DeleteIcon from '@material-ui/icons/Delete'\nimport EditIcon from '@material-ui/icons/Edit'\nimport Divider from '@material-ui/core/Divider'\n\n\n\ntype OptionsListProps = {\n    currentOptions: string[],\n    updateOptionsList: (action: OptionListActions, newData: string, oldData?: string) => void,\n    selectOptionForEditing: (option: string) => void,\n}\n\nconst OptionsList: React.FC<OptionsListProps> = ({ currentOptions, updateOptionsList, selectOptionForEditing }) => {\n\n    const classes = useStyles()\n\n    const removeOptionFromList = (optionToRemove: string) => {\n        updateOptionsList(OptionListActions.REMOVE, '', optionToRemove)\n    }\n    const editOption = (optionToEdit: string) => {\n        selectOptionForEditing(optionToEdit)\n    }\n\n    if (currentOptions.length === 0) {\n        return (\n            <div className={classes.container} data-testid='CreateQuestion'>\n                <Typography className={classes.text}>\n                No options have been added yet.\n                </Typography>\n            </div>\n        )\n    }\n\n    return(\n\n        <List data-testid='OptionsList'>\n            {currentOptions.map(option => {\n                return (\n                    <React.Fragment key={option}>\n                        <ListItem>\n                            <ListItemText>\n                                <Typography className={classes.listText}>\n                                    {option}\n                                </Typography>\n                            </ListItemText>\n                            <IconButton className={classes.listIconButton} onClick={() => editOption(option)}>\n                                <EditIcon className={classes.listIcon}/>\n                            </IconButton>                                      \n                            <IconButton className={classes.listIconButton} onClick={() => removeOptionFromList(option)}>\n                                <DeleteIcon className={classes.listIcon}/>\n                            </IconButton>                           \n                        </ListItem>\n                        <Divider/>\n                    </React.Fragment>   \n                )\n            })}             \n        </List>\n   \n    )\n}\n\nexport default OptionsList","import React, { useState } from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport { OptionListActions } from './VotingOptions'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\n\n\n\n\nconst optionIsValid = (option: string, currentOptions: string[]): boolean => {\n    return option.trim().length > 0 && !currentOptions.includes(option)\n}\n\n\ntype AddOrEditOptionProps = {\n    updateOptionsList: (action: OptionListActions, newData: string, oldData?: string) => void,\n    isEditing: string | undefined,\n    currentOptions: string[]\n}\n\n\n\nconst AddOrEditOption: React.FC<AddOrEditOptionProps> = ({ updateOptionsList,  isEditing, currentOptions }) => {\n\n    const classes = useStyles()\n    const [option, setOption] = useState(isEditing !== undefined ? isEditing : '')\n    const [actionType] = useState(isEditing === undefined ? OptionListActions.ADD : (isEditing !== '' ? OptionListActions.MODIFY : OptionListActions.ADD))\n\n    const handleInputChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setOption(event.target.value)\n    }\n\n    const saveOption = () => {\n        const oldData = isEditing !== '' ? isEditing : ''\n        updateOptionsList(actionType, option, oldData)\n        setOption('')\n    }    \n\n\n    return(\n        <div className={classes.container} data-testid='AddOrEditOption'>\n            <TextField\n                value={option}\n                variant='outlined'\n                placeholder='Type a new option here.'\n                multiline\n                rows={5}\n                onChange={handleInputChanged}\n                className={classes.inputWidth}\n                data-testid='option-textfield'\n            />\n            {optionIsValid(option, currentOptions) &&\n                <Button onClick={saveOption} className={classes.iconButton} data-testid='save-option-button'>\n                    <Typography>SAVE</Typography>\n                </Button>\n            }\n        </div>\n      \n    )\n}\n\nexport default AddOrEditOption","import { OptionListActions } from './VotingOptions'\n\nexport const getUpdatedCurrentOptionsList = (currentList: string[], action: OptionListActions, newData: string, oldData?: string): string[] => {\n    const updatedOptionsList = [...currentList]\n    console.log(action)\n    switch (action) {\n    case OptionListActions.ADD:\n        updatedOptionsList.push(newData)\n        return updatedOptionsList\n    case OptionListActions.MODIFY:\n        return updatedOptionsList.map(option => {\n            if (oldData === option) return newData\n            else return option\n        })\n    case OptionListActions.REMOVE:\n        return updatedOptionsList.filter(option => option !== oldData)\n    default:\n        return currentList\n    }\n}","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        container: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n            marginBottom: -5,\n            width: '85%',\n        },\n        displayContainer: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n            width: '85%',\n            borderRadius: 6,\n            backgroundColor: theme.palette.secondary.light,\n            padding: 10,\n        },\n        text: {\n            color: theme.palette.primary.main,\n            textAlign: 'center',\n            marginBottom: 10\n        },\n        outerContainer: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n    })\n)","import React from 'react'\nimport Radio from '@material-ui/core/Radio'\nimport RadioGroup from '@material-ui/core/RadioGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport theme from '../../../utils/theme'\n\n\ntype RadioButtonProps = {\n    saveCountData: (newValue: string) => void,\n    selectedValue: string\n}\n\n\nconst RadioButtons: React.FC<RadioButtonProps> = ({ saveCountData, selectedValue }) => {\n\n    const handleSelectionChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        saveCountData(event.target.value)\n    }\n\n    const selectedProps = { style: { color: theme.palette.primary.dark } }\n    const notSelectedProps = { style: { color: theme.palette.primary.light } }\n\n    return(\n        <div data-testid='RadioButtons'>\n            <FormControl component=\"fieldset\">\n                <RadioGroup value={selectedValue} onChange={handleSelectionChanged} data-testid='radiogroup'>\n                    {['1', '2', '3', '4', '5'].map((count) => {\n                        const currentProps = selectedValue === count ? selectedProps : notSelectedProps\n                        return (\n                            <FormControlLabel\n                                key={count + 'count'}\n                                value={count}\n                                control={<Radio {...currentProps}/>}\n                                label={count}\n                                {...currentProps}\n                            /> \n                        )\n                    })}\n                </RadioGroup>\n            </FormControl>\n        </div>\n      \n    )\n}\n\nexport default RadioButtons","import React from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport Buttons from '../buttons/Buttons'\nimport { StepType } from '../../../types/create-voting/StepType'\nimport { CountType } from '../../../types/create-voting/CountType'\nimport RadioButtons from './RadioButtons'\n\n\n\ntype SettingCountProps = {\n    setActiveStep: (newStep: number) => void,\n    updateStepsWithValues: (stepWithUpdatedValue: StepType) => void,\n    step: CountType,\n}\n\nconst SettingCount: React.FC<SettingCountProps> = ({ setActiveStep, updateStepsWithValues, step }) => {\n\n    const classes = useStyles()\n\n    const saveCountData = (updatedCount: string) => {\n        updateStepsWithValues({ ...step, value: parseInt(updatedCount) })\n    }\n\n    return(\n        <div className={classes.outerContainer}>\n            <div className={classes.container} data-testid='SettingCount'>\n                <Typography variant='h6' className={classes.text}>\n                    NUMBER OF VOTES TO GIVE\n                </Typography>\n                <Typography className={classes.text}>\n                    How many votes should one participant be able to give in total?\n                </Typography>\n                <RadioButtons\n                    saveCountData={saveCountData}\n                    selectedValue={step.value === undefined ? '' : step.value.toString() }\n                />\n                <>\n                    <Buttons\n                        activeStep={step.index}\n                        setActiveStep={setActiveStep}\n                        value={step.value}\n                    />\n                </>               \n            </div>\n        </div>      \n    )\n}\n\nexport default SettingCount","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        container: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n            marginBottom: -5,\n            width: '85%',\n        },\n        text: {\n            color: theme.palette.primary.main,\n            textAlign: 'center',\n        },\n        outerContainer: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n        previewContainer: {\n            backgroundColor: theme.palette.secondary.light,\n            marginTop: 5,\n            width: '90%',\n            borderRadius: 6,\n            padding: 10,\n        },\n        questionText: {\n            color: theme.palette.primary.main,\n            textAlign: 'center',\n            fontSize: 20,\n            marginBottom: -10\n        },\n        optionText: {\n            color: theme.palette.primary.main,\n        },      \n        infoText: {\n            color: theme.palette.primary.main,\n            fontSize: 16,\n        },  \n        errorMessage: {\n            color: theme.palette.error.main,\n            fontSize: 20,\n            textAlign: 'center',\n            marginTop: 10,\n        },   \n        noteText: {\n            color: theme.palette.primary.main,\n            fontSize: 14,\n            paddingTop: 10,\n            fontStyle: 'italic',\n            textAlign: 'center',\n        },  \n        buttonsContainer: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 30,\n        },\n        buttonText: {\n            color: theme.palette.primary.dark,\n        },\n        iconButton: {\n            backgroundColor: theme.palette.secondary.main,\n            margin: 5,\n        }\n    })\n)","import React from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport { StepsWithValuesType } from '../../../types/create-voting/StepsWithValuesType'\n\n\n\ntype PreviewVotingProps = {\n    stepsWithValues: StepsWithValuesType,\n}\n\nconst PreviewVoting: React.FC<PreviewVotingProps> = ({ stepsWithValues }) => {\n\n    const classes = useStyles()\n\n    return(\n        <div className={classes.previewContainer}>\n            <Typography className={classes.text}>\n                <strong>SUMMARY OF THE VOTING:</strong>\n            </Typography>\n            <div data-testid='PreviewVoting' className={classes.outerContainer}>\n                <Typography className={classes.questionText}>\n                    {stepsWithValues[0].value}\n                </Typography>\n                <ul>\n                    {stepsWithValues[1].value?.map(option => <li key={option} className={classes.optionText}>{option}</li>)}\n                </ul>\n                <Typography className={classes.infoText}>\n                    {stepsWithValues[2].value} votes / voter\n                </Typography>\n                <Typography className={classes.infoText}>\n                    {stepsWithValues[3].value ?\n                        'Show voter names to all' : 'Anonymous voting'\n                    }\n                </Typography>\n            </div>\n        </div>\n\n      \n    )\n}\n\nexport default PreviewVoting","import React from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport { StepType } from '../../../types/create-voting/StepType'\n\n\n\ntype MissingParametersProps = {\n    stepsWithMissingValues: StepType[],\n}\n\nconst MissingParameters: React.FC<MissingParametersProps> = ({ stepsWithMissingValues }) => {\n\n    const classes = useStyles()\n\n    return (\n        <div className={classes.outerContainer}>\n            <Typography className={classes.text}>\n                    All parameter values need to be set before your new voting event can be created.\n            </Typography>   \n            <Typography className={classes.text}>\n                    Please give values to the following:\n            </Typography>         \n            {<ul >\n                {stepsWithMissingValues.map(step => <li key={step.label}>{step.label}</li>)}\n            </ul>}     \n        </div>\n    )\n}\n\nexport default MissingParameters","import React from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport Button from '@material-ui/core/Button'\n\n\ntype ButtonProps = {\n    setActiveStep: (newStep: number) => void,\n    submitData: () => void,\n    valuesAreMissing: boolean\n}\n\n\nconst Buttons: React.FC<ButtonProps> = ({ setActiveStep, submitData, valuesAreMissing }) => {\n\n\n    const classes = useStyles()\n\n    const goBack = () => {\n        setActiveStep(3)\n    }\n\n\n    return(\n        <div>\n            {!valuesAreMissing &&\n                <Typography className={classes.noteText}>\n                    NOTE: Once you submit the voting data you cannot edit the voting parameters anymore!\n                </Typography>\n            }\n            <div className={classes.buttonsContainer} data-testid='Buttons'>\n                <Button onClick={goBack} className={classes.iconButton} data-testid='button-back' >\n                    <Typography className={classes.buttonText}>BACK</Typography>\n                </Button>   \n                {!valuesAreMissing &&\n                <Button onClick={submitData} className={classes.iconButton} data-testid='button-submit' >\n                    <Typography  className={classes.buttonText}>SUBMIT</Typography>\n                </Button>\n                }\n            </div>    \n        </div>\n\n      \n    )\n}\n\nexport default Buttons","import { VoteSubmissionData } from './service'\nimport { StepsWithValuesType } from '../../../types/create-voting/StepsWithValuesType'\n\nexport const getFormattedVotingData = (stepsWithValues: StepsWithValuesType): VoteSubmissionData => {\n    let votingData = {}\n    if (stepsWithValues.every(item => item !== undefined)) {\n        votingData = {\n            question: stepsWithValues[0].value,\n            options: stepsWithValues[1].value,\n            allowedCount: stepsWithValues[2].value,\n            showNames: stepsWithValues[3].value\n        }\n    }\n    return votingData as VoteSubmissionData\n}","import axios from 'axios'\n\nlet baseUrl = 'http://localhost:3001'\nif (process.env.NODE_ENV === 'production') {\n    baseUrl = 'https://lotsofdotsserver.herokuapp.com'\n}\n\n\nexport type VoteSubmissionData = {\n    question: string,\n    showNames: boolean,\n    allowedCount: number,\n    options: string[]\n}\nexport type VoteSubmissionResult = {\n    success: boolean,                          \n    code?: string,\n    error?: string\n}\n\n\nconst submitVotingData = async (votingData: VoteSubmissionData): Promise<VoteSubmissionResult> => {\n    try {\n        const requestBody = votingData\n        const response = await axios.post<string>(`${baseUrl}/votings`, requestBody)\n        return { success: true, code: response.data }\n    } catch (error) {\n        console.log(error)\n        console.log(error.toString())\n        return { success: false, error: 'SUBMISSION FAILED!!!' }\n    }\n}\n\nexport default { submitVotingData }","import React, { useContext } from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport { StepsWithValuesType } from '../../../types/create-voting/StepsWithValuesType'\nimport PreviewVoting from './PreviewVoting'\nimport MissingParameters from './MissingParameters'\nimport Buttons from './Buttons'\nimport { getFormattedVotingData } from './getFormattedVotingData'\nimport submitVotingService from './service'\nimport { getStepsWithMissingValues } from './getStepsWithMissingValues'\nimport { useState } from 'react'\nimport AppContext from '../../../state/AppContext'\nimport { actionTypes } from '../../../state/actions'\n\n\n\ntype GetCodeProps = {\n    setActiveStep: (newStep: number) => void,\n    stepsWithValues: StepsWithValuesType,\n    setCode: (newCode: string) => void,\n    resetValues: () => void\n}\n\n\n\nconst GetCode: React.FC<GetCodeProps> = ({ setActiveStep, stepsWithValues, setCode, resetValues }) => {\n\n    const classes = useStyles()\n    const [errorMessage, setErrorMessage] = useState<string | undefined>(undefined)\n    const { dispatch } = useContext(AppContext)\n    const stepsWithMissingValues = getStepsWithMissingValues(stepsWithValues)\n\n    const submitVotingData = async () => {\n        const votingData = getFormattedVotingData(stepsWithValues)\n        const submissionResponse = await submitVotingService.submitVotingData(votingData)\n        if (submissionResponse.success && submissionResponse.code) {\n            setCode(submissionResponse.code)\n            resetValues()\n            dispatch({ type: actionTypes.SET_VOTING_NUMBER, data: submissionResponse.code })\n        } else {\n            if (!submissionResponse.success && submissionResponse.error) {\n                setErrorMessage(submissionResponse.error)\n            }\n        }\n    }\n\n\n    return(\n        <div className={classes.outerContainer} id='get-code'>\n            <div className={classes.container} data-testid='GetCode'>\n                <Typography variant='h6' className={classes.text}>\n                    GET VOTING CODE\n                </Typography>\n                {stepsWithMissingValues.length > 0 ?\n                    <MissingParameters stepsWithMissingValues={stepsWithMissingValues}/>\n                    :\n                    <PreviewVoting stepsWithValues={stepsWithValues}/>\n                }\n                {errorMessage !== undefined &&\n                <>\n                    <Typography variant='h6' className={classes.errorMessage}>\n                        {errorMessage}\n                    </Typography>\n                </>\n\n                }\n                <Buttons\n                    setActiveStep={setActiveStep}\n                    submitData={submitVotingData}\n                    valuesAreMissing={stepsWithMissingValues.length > 0}\n                />\n            </div>\n        </div>\n\n      \n    )\n}\n\nexport default GetCode","import { StepType } from '../../../types/create-voting/StepType'\nimport { StepsWithValuesType } from '../../../types/create-voting/StepsWithValuesType'\n\nexport const getStepsWithMissingValues = (stepsWithValues: StepsWithValuesType): StepType[] => {\n    return stepsWithValues.filter(step => {\n        if (step.value === undefined && step.label !== 'code') return true\n        if (step.index === 1) {\n            const optionsList = step.value as string[]\n            return optionsList.length < 2\n        }\n    })\n}","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        container: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n            marginBottom: -5,\n            width: '85%',\n        },\n        text: {\n            color: theme.palette.primary.main,\n            textAlign: 'center',\n        },\n        outerContainer: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n        },\n        title: {\n            color: theme.palette.success.main,\n            textAlign: 'center',\n            marginTop: 40,\n            marginBottom: 10,\n        },\n        info: {\n            color: theme.palette.primary.main,\n            fontSize: 16,\n            marginTop: 30,\n            marginBottom: 20\n        },    \n        linkText: {\n            marginTop: 10\n        },\n        link: {\n            color: theme.palette.primary.main,\n        },\n    })\n)","import React from 'react'\nimport { useStyles } from './styles'\nimport Typography from '@material-ui/core/Typography'\nimport { Link } from 'react-router-dom'\n\n\n\ntype SuccessProps = {\n    code: string | undefined,\n}\n\nconst Success: React.FC<SuccessProps> = ({ code }) => {\n    const classes = useStyles()\n\n\n\n    return(\n        <div className={classes.outerContainer}>\n            <Typography variant='h6' className={classes.title}>Successfully created voting event.</Typography>\n            <Typography variant='h6' className={classes.text}>\n                    VOTING CODE:\n            </Typography>\n            <Typography variant='h4' className={classes.text}>\n                <strong>{code}</strong>\n            </Typography>\n            <Typography className={classes.info}>\n                Give this code to participants and start voting!\n            </Typography>\n            <Typography className={classes.linkText}>\n                <Link to='/vote' className={classes.link}>\n                    Vote in this voting event \n                </Link>\n            </Typography>\n            <Typography className={classes.linkText}>\n                <Link to='/view' className={classes.link}>\n                    View this voting \n                </Link>\n            </Typography>\n        </div>\n\n      \n    )\n}\n\nexport default Success","import React, { useState } from 'react'\nimport CreateVotingStepper from '../stepper/CreateVotingStepper'\nimport { StepsWithValuesType } from '../../../types/create-voting/StepsWithValuesType'\nimport { initialStepValues } from '../stepper/initialStepValues'\nimport CreateVotingTitle from './CreateVotingTitle'\nimport CreateQuestion from '../question/CreateQuestion'\nimport { StepType } from '../../../types/create-voting/StepType'\nimport { getStepsWithUpdatedValues } from './getStepsWithUpdatedValues'\nimport SettingIdentity from '../identity/SettingIdentity'\nimport VotingOptions from '../options/VotingOptions'\nimport SettingCount from '../count/SettingCount'\nimport GetCode from '../code/GetCode'\nimport Success from '../success/Success'\n\n\n\nconst CreateVotingMainPage: React.FC = () => {\n\n\n    const [activeStep, setActiveStep] = useState(0)\n    const [stepsWithValues, setStepsWithValues] = useState<StepsWithValuesType>(initialStepValues)\n    const [code, setCode] = useState<string | undefined>(undefined)\n\n    const updateStepsWithValues = (stepWithUpdatedValue: StepType) => {\n        const stepsWithUpdatedValues = getStepsWithUpdatedValues(stepWithUpdatedValue, stepsWithValues)\n        setStepsWithValues(stepsWithUpdatedValues)\n    }\n\n    const commonProps = {\n        setActiveStep: setActiveStep,\n        updateStepsWithValues: updateStepsWithValues\n    }\n\n    const resetValues = () => {\n        setStepsWithValues(initialStepValues)\n    }\n\n    return(\n        <div>\n            {code === undefined ?\n                <>\n                    <CreateVotingTitle/>\n                    <CreateVotingStepper activeStep={activeStep} setActiveStep={setActiveStep} stepsWithValues={stepsWithValues}/>\n                    {activeStep === 0 && <CreateQuestion {...commonProps} step={stepsWithValues[0]} />}\n                    {activeStep === 1 && <VotingOptions {...commonProps} step={stepsWithValues[1]} />}\n                    {activeStep === 2 && <SettingCount {...commonProps} step={stepsWithValues[2]} />}\n                    {activeStep === 3 && <SettingIdentity {...commonProps} step={stepsWithValues[3]} />}\n                    {activeStep === 4 && <GetCode {...commonProps} stepsWithValues={stepsWithValues} setCode={setCode} resetValues={resetValues}/>}\n                </>\n                :\n                <Success code={code}/>\n            }\n        </div>\n      \n    )\n}\n\nexport default CreateVotingMainPage\n"],"sourceRoot":""}