{"version":3,"sources":["components/vote/enter-voting-code/styles.ts","components/vote/enter-voting-code/getCodeValidity.ts","components/vote/enter-voting-code/EnterVotingCode.tsx","components/vote/get-data/service.ts","components/vote/get-data/useGetVotingData.ts","components/vote/error-display/styles.ts","components/vote/error-display/ErrorDisplay.tsx","components/view/styles.ts","components/view/OptionResult.tsx","components/view/VotingResults.tsx","components/view/getSortedVotings.ts","components/view/ViewVoting.tsx"],"names":["useStyles","makeStyles","theme","createStyles","textFieldInput","width","marginTop","button","backgroundColor","palette","secondary","main","container","display","flexDirection","justifyContent","alignItems","marginBottom","getCodeValidity","code","length","test","EnterVotingCode","classes","useState","setCode","dispatch","useContext","AppContext","className","TextField","value","variant","label","placeholder","onChange","event","target","id","Button","onClick","type","actionTypes","SET_VOTING_NUMBER","data","Typography","baseUrl","getVotingData","votingNumber","a","axios","get","response","formatVoting","undefined","responseData","voting","question","parseQuestion","parseVotingNumber","voting_number","showNames","parseShowNames","show_names","allowedCount","parseAllowedCount","allowed_count","created","parseCreated","optionVotes","parseOptionVotes","option_votes","isString","text","String","isNumber","number","Number","Error","Boolean","Array","isArray","map","optionVote","parseOneOptionVote","optionData","parseId","optionText","parseOptionText","option_text","optionVoters","parseOptionVoters","option_voters","voters","parseVoters","votersAllNull","every","voter","votersAllNames","useGetVotingData","errorInGettingData","setErrorInGettingData","state","useEffect","SET_VOTING_DATA","getData","color","error","textAlign","ErrorDisplay","questionText","submitButtonContainer","submitButton","primary","dark","submitButtonText","contrastText","linkText","rowContainer","marginLeft","marginRight","voterName","optionContainer","borderRadius","paddingLeft","votesNumberText","OptionResult","option","console","log","votingData","displayText","sort","index","VotingResults","sortedVotingOptions","option1","option2","result","ViewVoting"],"mappings":"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","file":"static/js/5.8c4d516a.chunk.js","sourcesContent":["import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        textFieldInput: {\n            width: '90%',\n            marginTop: 20,\n        },\n        button: {\n            backgroundColor: theme.palette.secondary.main,\n            marginTop: 10\n        },\n        container: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n            marginBottom: -5,\n            width: '85%',\n        },\n\n    })\n)","export const getCodeValidity = (code: string): boolean => {\n    const onlyNumbersRegex = /^[0-9]+$/\n    return code.length === 6 && onlyNumbersRegex.test(code)\n}","import React, { useContext, useState } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport { useStyles } from './styles'\nimport { getCodeValidity } from './getCodeValidity'\nimport AppContext from '../../../state/AppContext'\nimport { actionTypes } from '../../../state/actions'\n\n\n\nconst EnterVotingCode: React.FC = () => {\n\n    const classes = useStyles()\n    const [code, setCode] = useState('')\n    const { dispatch } = useContext(AppContext)\n \n    const handleInputChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCode(event.target.value)\n    }\n\n    const storeVotingCode = () => {\n        dispatch({ type: actionTypes.SET_VOTING_NUMBER, data: code })\n    }    \n\n\n\n    return(\n        <div className={classes.container}>\n            <TextField\n                value={code}\n                variant='outlined'\n                label='Voting code (6 digits)'\n                placeholder='Type the 6-digit code here'\n                onChange={handleInputChanged}\n                className={classes.textFieldInput}\n                id='code-textfield'\n            />\n            {getCodeValidity(code) &&\n                <Button onClick={storeVotingCode} className={classes.button} id='fetchData-button'>\n                    <Typography>GET VOTING</Typography>\n                </Button>\n            }\n        </div>\n      \n    )\n}\n\nexport default EnterVotingCode","import axios from 'axios'\nimport { OptionVote } from '../../../types/OptionVote'\nimport { OptionVoteInServerResponseType } from '../../../types/server-response/OptionVoteInServerResponseType'\nimport { VotingInServerResponseType } from '../../../types/server-response/VotingInServerResponseType'\nimport { Voting } from '../../../types/Voting'\n\nlet baseUrl = 'http://localhost:3001'\nif (process.env.NODE_ENV === 'production') {\n    baseUrl = 'https://lotsofdotsserver.herokuapp.com'\n}\n\n\n\nexport const getVotingData = async (votingNumber: string): Promise<Voting | undefined> => {\n    try {\n        const response = await axios.get(`${baseUrl}/votings/${votingNumber}`)\n        return formatVoting(response.data)\n    } catch (error) {\n        return undefined\n    }\n}\n\n\nconst formatVoting = (responseData: unknown): Voting => {\n    const voting = responseData as VotingInServerResponseType\n    return {\n        question: parseQuestion(voting.question),\n        votingNumber: parseVotingNumber(voting.voting_number),\n        showNames: parseShowNames(voting.show_names),\n        allowedCount: parseAllowedCount(voting.allowed_count),\n        created: parseCreated(voting.created),\n        optionVotes: parseOptionVotes(voting.option_votes)\n    }\n\n}\n\nconst isString = (text: unknown): text is string => {\n    return typeof text === 'string' || text instanceof String\n}\nconst isBoolean = (value: unknown): value is boolean => {\n    return typeof value === 'boolean' || value instanceof Boolean\n}\nconst isNumber = (number: unknown): number is number => {\n    return typeof number === 'number' || number instanceof Number\n}\nconst parseQuestion = (question: unknown): string => {\n    if (!question || !isString(question)) throw new Error('Question is required and must be string!')\n    return question\n}\nconst parseVotingNumber = (votingNumber: unknown): string => {\n    if (!votingNumber || !isString(votingNumber)) throw new Error('Voting number is required and must be string!')\n    return votingNumber\n}\nconst parseShowNames = (showNames: unknown): boolean => {\n    if (showNames === undefined || showNames === null || !isBoolean(showNames)) throw new Error('Show names is required and must be a boolean value!')\n    return showNames\n}\nconst parseAllowedCount = (allowedCount: unknown): number => {\n    if (!allowedCount || !isNumber(allowedCount)) throw new Error('Allowed count is required and must be a number!')\n    return allowedCount\n}\nconst parseCreated = (created: unknown): string => {\n    if (!created || !isString(created)) throw new Error('Date is required and must be string!')\n    return created\n}\nconst parseOptionVotes = (optionVotes: unknown): OptionVote[] => {\n    if (!optionVotes || !Array.isArray(optionVotes)) throw new Error('Options are required and must be an array of option data!')\n    return optionVotes.map(optionVote => parseOneOptionVote(optionVote))\n}\n\nconst parseOneOptionVote = (optionVote: unknown): OptionVote => {\n    const optionData = optionVote as OptionVoteInServerResponseType\n    return {\n        id: parseId(optionData.id),\n        optionText: parseOptionText(optionData.option_text),\n        optionVoters: parseOptionVoters(optionData.option_voters)\n    }\n}\nconst parseId = (id: unknown): number => {\n    if (!id || !isNumber(id)) throw new Error('Option Id is required and must be a number!')\n    return id\n}\nconst parseOptionText = (text: unknown): string => {\n    if (!text || !isString(text)) throw new Error('Option text is required and must be string!')\n    return text\n}\nconst parseOptionVoters = (voters: unknown): string[] | null[] => {\n    if (!voters || !Array) throw new Error('Option voters are required and must be an array of string or null!')\n    if ((voters as Array<string | null>).length === 1 && (voters as Array<string | null>)[0] === null) return []\n    return parseVoters(voters)\n}\nconst votersAllNull = (voters: unknown): boolean => {\n    const votersNull = voters as null[]\n    return votersNull.every(voter => voter === null)\n}\nconst votersAllNames = (voters: unknown): boolean => {\n    const votersNull = voters as string[]\n    return votersNull.every(voter => isString(voter))\n}\nconst parseVoters = (voters: unknown): string[] | null[] => {\n    if (!votersAllNull(voters) && !votersAllNames(voters)) throw new Error('Option voters are required and must be an array of string or null!')\n    if (votersAllNull(voters)) return voters as null[]\n    return voters as string[]\n}\n\n\n\n\n\n\n","import { useContext, useState, useEffect } from 'react'\nimport { actionTypes } from '../../../state/actions'\nimport { getVotingData } from './service'\nimport AppContext from '../../../state/AppContext'\n\n\ntype UseGetVotingData = {\n    errorInGettingData: boolean\n}\n\nexport const useGetVotingData = (): UseGetVotingData => {\n\n    const [errorInGettingData, setErrorInGettingData] = useState(false)\n    const { state, dispatch } = useContext(AppContext)\n\n    useEffect(() => {\n        async function getData() {\n            if (state.votingNumber !== undefined) {\n                const voting = await getVotingData(state.votingNumber)\n                if (voting !== undefined) {\n                    dispatch({ type: actionTypes.SET_VOTING_DATA, data: voting })\n                } else {\n                    setErrorInGettingData(true)\n                }\n            }\n\n        }\n        getData()\n    }, [])\n\n\n\n    return {\n        errorInGettingData\n    }\n\n}","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        container: {\n            marginTop: 40,\n        },\n        text: {\n            color: theme.palette.error.main,\n            textAlign: 'center',\n            marginTop: 10\n        },\n    })\n)","import React from 'react'\nimport { Typography } from '@material-ui/core'\nimport { useStyles } from './styles'\n\n\ntype ErrorDisplayProps = {\n    votingNumber: string\n}\n\nconst ErrorDisplay: React.FC<ErrorDisplayProps> = ({ votingNumber }) => {\n\n    const classes = useStyles()\n\n    return (\n        <div className={classes.container}>\n            <Typography variant='h6' className={classes.text}>\n                Voting number\n            </Typography>\n            <Typography variant='h4' className={classes.text}>\n                <strong>{votingNumber}</strong>\n            </Typography>\n            <Typography variant='h6' className={classes.text}>\n                Could not find that voting!\n            </Typography>\n        </div>\n    )\n}\n\nexport default ErrorDisplay\n\n\n","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        questionText: {\n            textAlign: 'center',\n            marginTop: 20\n        },\n        submitButtonContainer: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 40,\n        },\n        submitButton: {\n            backgroundColor: theme.palette.primary.dark\n        },\n        submitButtonText: {\n            color: theme.palette.primary.contrastText\n        },\n        linkText: {\n            color: theme.palette.primary.main,\n        },\n        rowContainer: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'flex-start',\n            alignItems: 'center',\n            marginTop: 20,\n            marginLeft: 20\n        },\n        optionText: {\n            marginRight: 40,\n        },\n        voterName: {\n            marginTop: -5,\n        },\n        text: {\n            textAlign: 'center',\n            marginTop: 20,\n            color: theme.palette.primary.dark,\n        },\n        optionContainer: {\n            backgroundColor: theme.palette.secondary.main,\n            marginTop: 5,\n            borderRadius: 6,\n            paddingLeft: 10\n        },\n        votesNumberText: {\n            marginTop: -5,\n        }\n\n    })\n)","\nimport { Typography } from '@material-ui/core'\nimport React, { useContext } from 'react'\nimport AppContext from '../../state/AppContext'\nimport { OptionVote } from '../../types/OptionVote'\nimport { useStyles } from './styles'\n\n\ntype OptionResultProps = {\n    option: OptionVote,\n    showNames: boolean\n}\n\n\nconst OptionResult: React.FC<OptionResultProps> = ({ option, showNames }) => {\n\n    const { state } = useContext(AppContext)\n\n    const classes = useStyles()\n\n\n    console.log(state.votingData)\n    let displayText = option.optionVoters.length + ' votes'\n    if (showNames && option.optionVoters.length > 0) displayText += ', voters: '\n\n\n    return (\n        <div className={classes.optionContainer}>\n            <Typography variant='h6' className={classes.optionText}><strong>{option.optionText}</strong></Typography>\n            <Typography className={classes.votesNumberText}>{displayText}</Typography>\n            {showNames &&\n                <ul>\n                    {(option.optionVoters as string[]).sort().map((voter, index) => \n                        <li key={voter + option.optionText + index}>\n                            <Typography \n                                \n                                className={classes.voterName}\n                            >\n                                {voter}\n                            </Typography>\n                        </li>\n    \n                    )\n\n                    }\n                </ul>\n                \n            }\n            \n        </div>\n    )\n}\n\nexport default OptionResult","import { Typography } from '@material-ui/core'\nimport React, { useContext } from 'react'\nimport AppContext from '../../state/AppContext'\nimport ErrorDisplay from '../vote/error-display/ErrorDisplay'\nimport { useGetVotingData } from '../vote/get-data/useGetVotingData'\nimport { useStyles } from './styles'\nimport { getSortedVotings } from './getSortedVotings'\nimport OptionResult from './OptionResult'\n\n\n\nconst VotingResults: React.FC = () => {\n\n    const { state } = useContext(AppContext)\n    const { errorInGettingData } = useGetVotingData()\n    const classes = useStyles()\n\n    if (!state.votingNumber) return null\n    if (errorInGettingData) return <ErrorDisplay votingNumber={state.votingNumber}/>\n    if (!state.votingData) return null\n\n    const votingData = state.votingData\n    const sortedVotingOptions = getSortedVotings(votingData.optionVotes)\n\n    return (\n        <div>\n            <Typography variant='h5' className={classes.questionText}>\n                <strong>{votingData.question}</strong>\n            </Typography>\n            {sortedVotingOptions.map(result => \n                <OptionResult \n                    key={result.id} \n                    option={result}\n                    showNames={votingData.showNames}\n                />)\n            }\n        </div>\n    )\n}\n\nexport default VotingResults","import { OptionVote } from '../../types/OptionVote'\n\n\nexport const getSortedVotings = (optionVotes: OptionVote[]): OptionVote[] => {\n    return optionVotes.sort(function(option1, option2) {\n        if (option1.optionVoters.length < option2.optionVoters.length) return 1\n        if (option1.optionVoters.length > option2.optionVoters.length) return -1\n        return 0\n    })\n}\n\n","import React, { useContext } from 'react'\nimport AppContext from '../../state/AppContext'\nimport EnterVotingCode from '../vote/enter-voting-code/EnterVotingCode'\nimport VotingResults from './VotingResults'\nimport { useStyles } from './styles'\nimport { Typography } from '@material-ui/core'\n\n\n\nconst ViewVoting: React.FC = () => {\n\n    const { state } = useContext(AppContext)\n    const classes = useStyles()\n\n    return(\n        <div>\n            <Typography variant='h5' className={classes.text}>\n                <strong>RESULTS</strong>\n            </Typography>\n            {state.votingNumber === undefined ?\n                <EnterVotingCode/>\n                :\n                <VotingResults/>\n            }\n        </div>\n      \n    )\n}\n\nexport default ViewVoting"],"sourceRoot":""}