{"version":3,"sources":["components/vote/enter-voting-code/styles.ts","components/vote/enter-voting-code/getCodeValidity.ts","components/vote/enter-voting-code/EnterVotingCode.tsx","components/vote/get-data/service.ts","components/vote/get-data/useGetVotingData.ts","components/vote/error-display/styles.ts","components/vote/error-display/ErrorDisplay.tsx","components/vote/enter-name/styles.ts","components/vote/enter-name/EnterName.tsx","components/vote/vote-option/styles.ts","components/vote/vote-option/VoteOption.tsx","components/vote/select-options/service.ts","types/Alert.ts","components/vote/select-options/styles.ts","components/common-components/snackbar-alert/SnackbarAlert.tsx","components/vote/select-options/SelectOptions.tsx","components/vote/perform-voting/PerformVoting.tsx","components/vote/vote-main/styles.ts","components/vote/vote-main/Vote.tsx"],"names":["useStyles","makeStyles","theme","createStyles","textFieldInput","width","marginTop","button","backgroundColor","palette","secondary","main","container","display","flexDirection","justifyContent","alignItems","marginBottom","getCodeValidity","code","length","test","EnterVotingCode","classes","useState","setCode","dispatch","useContext","AppContext","className","TextField","value","variant","label","placeholder","onChange","event","target","id","Button","onClick","type","actionTypes","SET_VOTING_NUMBER","data","Typography","baseUrl","getVotingData","votingNumber","a","axios","get","response","formatVoting","undefined","responseData","voting","question","parseQuestion","parseVotingNumber","voting_number","showNames","parseShowNames","show_names","allowedCount","parseAllowedCount","allowed_count","created","parseCreated","optionVotes","parseOptionVotes","option_votes","isString","text","String","isNumber","number","Number","Error","Boolean","Array","isArray","map","optionVote","parseOneOptionVote","optionData","parseId","optionText","parseOptionText","option_text","optionVoters","parseOptionVoters","option_voters","voters","parseVoters","votersAllNull","every","voter","votersAllNames","useGetVotingData","errorInGettingData","setErrorInGettingData","state","useEffect","SET_VOTING_DATA","getData","color","error","textAlign","ErrorDisplay","instructionText","EnterName","setVoterName","name","setName","buttonsContainer","unvoteButton","primary","contrastText","marginLeft","height","voteButton","light","VoteOption","votes","changeSelection","remaining","votingDone","voteThisOption","preventDefault","fill","VoteAction","UNVOTE","item","index","disabled","VOTE","Severity","submitSelectedVotingOptions","selectedVotingOptionsData","post","questionText","submitButtonContainer","submitButton","dark","submitButtonText","linkText","SnackbarAlert","alert","Snackbar","open","isOpen","autoHideDuration","onClose","severity","message","SelectOptions","voterName","votingData","setVotingDone","dictionary","forEach","getSelectionsDictionary","selectionDictionary","setSelectionDictionary","setAlert","action","votesGiven","reduce","total","current","updated","getAnswers","answers","Object","entries","optionId","numberOfVotes","numbers","parseInt","concat","vote","SUCCESS","ERROR","remainingNumberOfVotes","to","PerformVoting","Vote"],"mappings":"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","file":"static/js/6.be7127c4.chunk.js","sourcesContent":["import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        textFieldInput: {\n            width: '90%',\n            marginTop: 20,\n        },\n        button: {\n            backgroundColor: theme.palette.secondary.main,\n            marginTop: 10\n        },\n        container: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 10,\n            marginBottom: -5,\n            width: '85%',\n        },\n\n    })\n)","export const getCodeValidity = (code: string): boolean => {\n    const onlyNumbersRegex = /^[0-9]+$/\n    return code.length === 6 && onlyNumbersRegex.test(code)\n}","import React, { useContext, useState } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport { useStyles } from './styles'\nimport { getCodeValidity } from './getCodeValidity'\nimport AppContext from '../../../state/AppContext'\nimport { actionTypes } from '../../../state/actions'\n\n\n\nconst EnterVotingCode: React.FC = () => {\n\n    const classes = useStyles()\n    const [code, setCode] = useState('')\n    const { dispatch } = useContext(AppContext)\n \n    const handleInputChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setCode(event.target.value)\n    }\n\n    const storeVotingCode = () => {\n        dispatch({ type: actionTypes.SET_VOTING_NUMBER, data: code })\n    }    \n\n\n\n    return(\n        <div className={classes.container}>\n            <TextField\n                value={code}\n                variant='outlined'\n                label='Voting code (6 digits)'\n                placeholder='Type the 6-digit code here'\n                onChange={handleInputChanged}\n                className={classes.textFieldInput}\n                id='code-textfield'\n            />\n            {getCodeValidity(code) &&\n                <Button onClick={storeVotingCode} className={classes.button} id='fetchData-button'>\n                    <Typography>GET VOTING</Typography>\n                </Button>\n            }\n        </div>\n      \n    )\n}\n\nexport default EnterVotingCode","import axios from 'axios'\nimport { OptionVote } from '../../../types/OptionVote'\nimport { OptionVoteInServerResponseType } from '../../../types/server-response/OptionVoteInServerResponseType'\nimport { VotingInServerResponseType } from '../../../types/server-response/VotingInServerResponseType'\nimport { Voting } from '../../../types/Voting'\n\nlet baseUrl = 'http://localhost:3001'\nif (process.env.NODE_ENV === 'production') {\n    baseUrl = 'https://lotsofdotsserver.herokuapp.com'\n}\n\n\n\nexport const getVotingData = async (votingNumber: string): Promise<Voting | undefined> => {\n    try {\n        const response = await axios.get(`${baseUrl}/votings/${votingNumber}`)\n        return formatVoting(response.data)\n    } catch (error) {\n        return undefined\n    }\n}\n\n\nconst formatVoting = (responseData: unknown): Voting => {\n    const voting = responseData as VotingInServerResponseType\n    return {\n        question: parseQuestion(voting.question),\n        votingNumber: parseVotingNumber(voting.voting_number),\n        showNames: parseShowNames(voting.show_names),\n        allowedCount: parseAllowedCount(voting.allowed_count),\n        created: parseCreated(voting.created),\n        optionVotes: parseOptionVotes(voting.option_votes)\n    }\n\n}\n\nconst isString = (text: unknown): text is string => {\n    return typeof text === 'string' || text instanceof String\n}\nconst isBoolean = (value: unknown): value is boolean => {\n    return typeof value === 'boolean' || value instanceof Boolean\n}\nconst isNumber = (number: unknown): number is number => {\n    return typeof number === 'number' || number instanceof Number\n}\nconst parseQuestion = (question: unknown): string => {\n    if (!question || !isString(question)) throw new Error('Question is required and must be string!')\n    return question\n}\nconst parseVotingNumber = (votingNumber: unknown): string => {\n    if (!votingNumber || !isString(votingNumber)) throw new Error('Voting number is required and must be string!')\n    return votingNumber\n}\nconst parseShowNames = (showNames: unknown): boolean => {\n    if (showNames === undefined || showNames === null || !isBoolean(showNames)) throw new Error('Show names is required and must be a boolean value!')\n    return showNames\n}\nconst parseAllowedCount = (allowedCount: unknown): number => {\n    if (!allowedCount || !isNumber(allowedCount)) throw new Error('Allowed count is required and must be a number!')\n    return allowedCount\n}\nconst parseCreated = (created: unknown): string => {\n    if (!created || !isString(created)) throw new Error('Date is required and must be string!')\n    return created\n}\nconst parseOptionVotes = (optionVotes: unknown): OptionVote[] => {\n    if (!optionVotes || !Array.isArray(optionVotes)) throw new Error('Options are required and must be an array of option data!')\n    return optionVotes.map(optionVote => parseOneOptionVote(optionVote))\n}\n\nconst parseOneOptionVote = (optionVote: unknown): OptionVote => {\n    const optionData = optionVote as OptionVoteInServerResponseType\n    return {\n        id: parseId(optionData.id),\n        optionText: parseOptionText(optionData.option_text),\n        optionVoters: parseOptionVoters(optionData.option_voters)\n    }\n}\nconst parseId = (id: unknown): number => {\n    if (!id || !isNumber(id)) throw new Error('Option Id is required and must be a number!')\n    return id\n}\nconst parseOptionText = (text: unknown): string => {\n    if (!text || !isString(text)) throw new Error('Option text is required and must be string!')\n    return text\n}\nconst parseOptionVoters = (voters: unknown): string[] | null[] => {\n    if (!voters || !Array) throw new Error('Option voters are required and must be an array of string or null!')\n    if ((voters as Array<string | null>).length === 1 && (voters as Array<string | null>)[0] === null) return []\n    return parseVoters(voters)\n}\nconst votersAllNull = (voters: unknown): boolean => {\n    const votersNull = voters as null[]\n    return votersNull.every(voter => voter === null)\n}\nconst votersAllNames = (voters: unknown): boolean => {\n    const votersNull = voters as string[]\n    return votersNull.every(voter => isString(voter))\n}\nconst parseVoters = (voters: unknown): string[] | null[] => {\n    if (!votersAllNull(voters) && !votersAllNames(voters)) throw new Error('Option voters are required and must be an array of string or null!')\n    if (votersAllNull(voters)) return voters as null[]\n    return voters as string[]\n}\n\n\n\n\n\n\n","import { useContext, useState, useEffect } from 'react'\nimport { actionTypes } from '../../../state/actions'\nimport { getVotingData } from './service'\nimport AppContext from '../../../state/AppContext'\n\n\ntype UseGetVotingData = {\n    errorInGettingData: boolean\n}\n\nexport const useGetVotingData = (): UseGetVotingData => {\n\n    const [errorInGettingData, setErrorInGettingData] = useState(false)\n    const { state, dispatch } = useContext(AppContext)\n\n    useEffect(() => {\n        async function getData() {\n            if (state.votingNumber !== undefined) {\n                const voting = await getVotingData(state.votingNumber)\n                if (voting !== undefined) {\n                    dispatch({ type: actionTypes.SET_VOTING_DATA, data: voting })\n                } else {\n                    setErrorInGettingData(true)\n                }\n            }\n\n        }\n        getData()\n    }, [])\n\n\n\n    return {\n        errorInGettingData\n    }\n\n}","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        container: {\n            marginTop: 40,\n        },\n        text: {\n            color: theme.palette.error.main,\n            textAlign: 'center',\n            marginTop: 10\n        },\n    })\n)","import React from 'react'\nimport { Typography } from '@material-ui/core'\nimport { useStyles } from './styles'\n\n\ntype ErrorDisplayProps = {\n    votingNumber: string\n}\n\nconst ErrorDisplay: React.FC<ErrorDisplayProps> = ({ votingNumber }) => {\n\n    const classes = useStyles()\n\n    return (\n        <div className={classes.container}>\n            <Typography variant='h6' className={classes.text}>\n                Voting number\n            </Typography>\n            <Typography variant='h4' className={classes.text}>\n                <strong>{votingNumber}</strong>\n            </Typography>\n            <Typography variant='h6' className={classes.text}>\n                Could not find that voting!\n            </Typography>\n        </div>\n    )\n}\n\nexport default ErrorDisplay\n\n\n","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        textFieldInput: {\n            width: '90%',\n            marginTop: 20,\n        },\n        button: {\n            backgroundColor: theme.palette.secondary.main,\n            marginTop: 10\n        },\n        container: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 30,\n            marginBottom: -5,\n            width: '85%',\n        },\n        instructionText: {\n            textAlign: 'center'\n        }\n\n    })\n)","import React, { useState } from 'react'\nimport Typography from '@material-ui/core/Typography'\nimport TextField from '@material-ui/core/TextField'\nimport Button from '@material-ui/core/Button'\nimport { useStyles } from './styles'\n\n\ntype EnterNameProps = {\n    setVoterName: (name: string) => void\n}\n\n\nconst EnterName: React.FC<EnterNameProps> = ({ setVoterName }) => {\n\n    const classes = useStyles()\n    const [name, setName] = useState('')\n\n    const handleInputChanged = (event: React.ChangeEvent<HTMLInputElement>) => {\n        setName(event.target.value)\n    }\n    const saveName = () => {\n        setVoterName(name)\n    }\n\n    return(\n        <div className={classes.container}>\n            <Typography className={classes.instructionText}>Please give your name.</Typography>\n            <Typography>(Note that others will see how you voted.)</Typography>\n            <TextField\n                value={name}\n                variant='outlined'\n                label='Your name'\n                placeholder='Type your name here'\n                onChange={handleInputChanged}\n                className={classes.textFieldInput}\n                id='name-textfield'\n            />\n            {name.length > 3 &&\n                <Button onClick={saveName} className={classes.button} id='fetchData-button'>\n                    <Typography>SAVE NAME</Typography>\n                </Button>\n            }\n        </div>\n      \n    )\n}\n\nexport default EnterName","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        optionText: {\n            textAlign: 'center',\n            marginTop: 20\n        },\n        buttonsContainer: {\n            display: 'flex',\n            flexDirection: 'row',\n            justifyContent: 'center',\n            alignItems: 'center',\n  \n        },\n        unvoteButton: {\n            backgroundColor: theme.palette.primary.main,\n            color: theme.palette.primary.contrastText,\n            marginLeft: 3,\n            height: 25\n        },\n        voteButton: {\n            backgroundColor: theme.palette.secondary.light,\n            color: theme.palette.secondary.contrastText,\n            marginLeft: 3,\n            height: 25\n        }\n    })\n)","import React from 'react'\nimport { Typography, Button } from '@material-ui/core'\nimport { VoteAction } from '../select-options/SelectOptions'\nimport { useStyles } from './styles'\n\n\ntype VoteOptionProps = {\n    id: number,\n    optionText: string,\n    votes: number,\n    changeSelection: (id: number, action: VoteAction) => void,\n    remaining: number,\n    votingDone: boolean,\n}\n\n\n\nconst VoteOption: React.FC<VoteOptionProps> = ({ id, optionText, votes, changeSelection, remaining, votingDone }) => {\n\n    const classes = useStyles()\n\n    \n    const voteThisOption = (event: React.MouseEvent<HTMLElement>, text: VoteAction) => {\n        event.preventDefault()\n        changeSelection(id, text)\n    }\n    \n    return(\n        <div>\n            <Typography variant='h6' className={classes.optionText}>{optionText}</Typography>\n            <div className={classes.buttonsContainer}>\n                {(new Array(votes).fill(VoteAction.UNVOTE).map((item, index) => {\n                    return (\n                        <Button\n                            key={index + id + 'unvote'}\n                            onClick={(event) => voteThisOption(event, item)}\n                            className={classes.unvoteButton}\n                            disabled={votingDone}\n                        >\n                            {item}\n                        </Button>\n                    )\n                }))}\n                {(new Array(remaining).fill(VoteAction.VOTE).map((item, index) => {\n                    return (\n                        <Button\n                            key={index + id + 'vote'}\n                            onClick={(event) => voteThisOption(event, item)}\n                            className={classes.voteButton}\n                            disabled={votingDone}\n                        >\n                            {item}\n                        </Button>\n                    )\n                }))}\n            </div>\n        </div>\n      \n    )\n}\n\nexport default VoteOption\n\n\n\n","import axios from 'axios'\n\nlet baseUrl = 'http://localhost:3001'\nif (process.env.NODE_ENV === 'production') {\n    baseUrl = 'https://lotsofdotsserver.herokuapp.com'\n}\n\n\nexport type SelectedVotingOptionsData = {\n    name: string | undefined,\n    answers: number[]\n}\n\n\n\nexport const submitSelectedVotingOptions = async (selectedVotingOptionsData: SelectedVotingOptionsData): Promise<boolean> => {\n    try {\n        await axios.post<string>(`${baseUrl}/answers`, selectedVotingOptionsData)\n        return true\n    } catch (error) {\n        return false\n    }\n}\n\n","export enum Severity {\n    ERROR = 'error',\n    WARNING = 'warning',\n    SUCCESS = 'success'\n}\n\nexport type Alert = {\n    isOpen: boolean,\n    severity: Severity,\n    message: string,\n    onClose: () => void,\n    autoHideDuration: number\n}","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        questionText: {\n            textAlign: 'center',\n            marginTop: 20\n        },\n        submitButtonContainer: {\n            display: 'flex',\n            flexDirection: 'column',\n            justifyContent: 'center',\n            alignItems: 'center',\n            marginTop: 40,\n        },\n        submitButton: {\n            backgroundColor: theme.palette.primary.dark\n        },\n        submitButtonText: {\n            color: theme.palette.primary.contrastText\n        },\n        linkText: {\n            color: theme.palette.primary.main,\n        }\n\n    })\n)","import React from 'react'\nimport { Alert } from '../../../types/Alert'\nimport Snackbar from '@material-ui/core/Snackbar'\nimport MuiAlert from '@material-ui/lab/Alert'\n\ntype SnackbarAlertProps = {\n    alert: Alert\n}\n\nconst SnackbarAlert: React.FC<SnackbarAlertProps> = ({ alert }) => {\n    return (\n        <Snackbar id='snackbar-alert' open={alert.isOpen} autoHideDuration={alert.autoHideDuration} onClose={alert.onClose}>\n            <MuiAlert variant='filled' severity={alert.severity} onClose={alert.onClose} id={`alert-${alert.severity}`}>\n                {alert.message}\n            </MuiAlert>\n        </Snackbar>\n    )\n}\n\nexport default SnackbarAlert\n","import React from 'react'\nimport { useContext } from 'react'\nimport { useState } from 'react'\nimport AppContext from '../../../state/AppContext'\nimport { Button, Typography } from '@material-ui/core'\nimport VoteOption from '../vote-option/VoteOption'\nimport { Voting } from '../../../types/Voting'\nimport { SelectedVotingOptionsData, submitSelectedVotingOptions } from './service'\nimport { useStyles } from './styles'\nimport SnackbarAlert from '../../common-components/snackbar-alert/SnackbarAlert'\nimport { Alert, Severity } from '../../../types/Alert'\nimport { Link } from 'react-router-dom'\n\n\n\nexport enum VoteAction {\n    VOTE = 'VOTE',\n    UNVOTE = 'UNVOTE'\n}\n\n\ntype SelectOptionsProps = {\n    voterName: string | undefined\n}\n\nconst getSelectionsDictionary = (votingData: Voting | undefined): undefined | Record<number, number> => {\n    if (!votingData) return undefined\n    const dictionary: Record<number, number> = {}\n    votingData.optionVotes.forEach(item => {\n        dictionary[item.id] = 0\n    })\n    return dictionary\n}\n\n\n\nconst SelectOptions: React.FC<SelectOptionsProps> = ({ voterName }) => {\n\n    const classes = useStyles()\n\n    const { state } = useContext(AppContext)\n    const [votingData] = useState(state.votingData)\n    const [votingDone, setVotingDone] = useState(false)\n    const [selectionDictionary, setSelectionDictionary] = useState(getSelectionsDictionary(state.votingData))\n    const [alert, setAlert] = useState<Alert | undefined>(undefined)\n\n\n\n    if (!votingData || !selectionDictionary) return null\n\n\n    const changeSelection = (id: number, action: VoteAction) => {\n        const votesGiven = votingData.optionVotes.reduce((total, current) => total + selectionDictionary[current.id], 0)\n        if (action === VoteAction.VOTE && votesGiven < votingData.allowedCount) {\n            const updated = { ...selectionDictionary }\n            updated[id] = selectionDictionary[id] + 1\n            setSelectionDictionary(updated)\n        } else if (selectionDictionary[id] > 0) {\n            const updated = { ...selectionDictionary }\n            updated[id] = selectionDictionary[id] - 1\n            setSelectionDictionary(updated)\n        }\n    }\n\n    const getAnswers = (): number[] => {\n        let answers: number[] = []\n        for (const [optionId, numberOfVotes] of Object.entries(selectionDictionary)) {\n            const numbers = new Array(numberOfVotes).fill(parseInt(optionId))\n            answers = answers.concat(numbers)\n        }\n        return answers\n    }\n\n    const vote = async () => {\n        const selectedVotingOptionsData: SelectedVotingOptionsData = {\n            name: voterName,\n            answers: getAnswers()\n        }\n        const answersSaved = await submitSelectedVotingOptions(selectedVotingOptionsData)\n        if (answersSaved) {\n            const alert: Alert = { isOpen: true, severity: Severity.SUCCESS, message: 'Votes successfully saved!', onClose: () => setAlert(undefined), autoHideDuration: 5000 }\n            setAlert(alert)\n            setVotingDone(true)\n        } else {\n            const alert: Alert = { isOpen: true, severity: Severity.ERROR, message: 'Could not submit votes!', onClose: () => setAlert(undefined), autoHideDuration: 5000 }\n            setAlert(alert)\n        }\n\n        \n    }\n\n    \n    const votesGiven = votingData.optionVotes.reduce((total, current) => total + selectionDictionary[current.id], 0)\n    const remainingNumberOfVotes = votingData.allowedCount - votesGiven\n\n\n    return(\n        <div>\n            <Typography variant='h5' className={classes.questionText}>\n                <strong>{votingData.question}</strong>\n            </Typography>\n            {votingData.optionVotes.map(item => <VoteOption\n                key={item.optionText}\n                id={item.id}\n                optionText={item.optionText}\n                changeSelection={changeSelection}\n                votes={selectionDictionary[item.id]}\n                remaining={remainingNumberOfVotes}\n                votingDone={votingDone}\n            />)}\n            <div className={classes.submitButtonContainer}>\n                {!votingDone && votesGiven > 0 &&\n                <Button onClick={vote} variant='contained'  className={classes.submitButton}>\n                    <Typography className={classes.submitButtonText}>\n                        SUBMIT VOTES\n                    </Typography>\n                </Button>\n                }\n                {votingDone && \n                    <Typography>\n                        <Link to='/view' className={classes.linkText}>\n                            View current voting situation \n                        </Link>\n                    </Typography>\n                }\n            </div>\n\n            {alert && <SnackbarAlert alert={alert}/>}\n        </div>\n      \n    )\n}\n\nexport default SelectOptions\n\n","import React, { useContext, useState } from 'react'\nimport AppContext from '../../../state/AppContext'\nimport { useGetVotingData } from '../get-data/useGetVotingData'\nimport ErrorDisplay from '../error-display/ErrorDisplay'\nimport EnterName from '../enter-name/EnterName'\nimport SelectOptions from '../select-options/SelectOptions'\n\n\n\nconst PerformVoting: React.FC = () => {\n\n    const [voterName, setVoterName] = useState<string | undefined>(undefined)\n    const { state } = useContext(AppContext)\n    const { errorInGettingData } = useGetVotingData()\n\n\n    if (!state.votingNumber) return null\n    if (errorInGettingData) return <ErrorDisplay votingNumber={state.votingNumber}/>\n    if (!state.votingData) return null\n    if (state.votingData.showNames && !voterName) return <EnterName setVoterName={setVoterName}/>\n    return <SelectOptions voterName={voterName}/>\n}\n\nexport default PerformVoting\n\n","import { makeStyles, createStyles } from '@material-ui/core/styles'\nimport { Theme } from '@material-ui/core'\n\nexport const useStyles = makeStyles((theme: Theme) => \n    createStyles({\n        text: {\n            textAlign: 'center',\n            marginTop: 20,\n            color: theme.palette.primary.dark,\n        },\n\n\n    })\n)","import React, { useContext } from 'react'\nimport EnterVotingCode from '../enter-voting-code/EnterVotingCode'\nimport AppContext from '../../../state/AppContext'\nimport PerformVoting from '../perform-voting/PerformVoting'\nimport { useStyles } from './styles'\nimport { Typography } from '@material-ui/core'\n\n\nconst Vote: React.FC = () => {\n\n    const { state } = useContext(AppContext)\n    const classes = useStyles()\n\n    return(\n        <div>\n            <Typography variant='h5' className={classes.text}>\n                <strong>VOTE</strong>\n            </Typography>\n            {state.votingNumber === undefined ?\n                <EnterVotingCode/>\n                :\n                <PerformVoting/>\n            }\n        </div>\n      \n    )\n}\n\nexport default Vote"],"sourceRoot":""}